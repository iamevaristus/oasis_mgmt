package com.oasis.backend.core.jwt;

import com.oasis.backend.domains.auth.dtos.AuthDto;

/**
 * Service interface for managing JWT (JSON Web Token) operations.
 * <p>
 * This interface provides methods for generating, validating, and extracting information
 * from JWT tokens. Implementations of this interface should ensure secure handling of
 * token-related operations, providing a reliable way to manage authentication and
 * authorization within the application.
 * </p>
 *
 * @see JwtImplementation
 */
public interface JwtService {
    /**
     * Generates a JWT token based on the provided data.
     * <p>
     * This method creates a new JWT token using the specified data and subject.
     * The generated token can be used for authenticating a user or for other
     * secure communication purposes. The data typically includes claims that
     * can be used to validate the token.
     * </p>
     *
     * @param auth   The auth details for the token, typically containing claims and user
     *               information in the form of a key-value pair.
     * @return The generated JWT token as a {@link String}.
     */
    String generateToken(AuthDto auth);

    /**
     * Checks whether the provided JWT token has expired.
     * <p>
     * This method validates the expiration of the given JWT token by examining its
     * claims. If the token has expired, it should not be accepted for further
     * authentication or authorization operations.
     * </p>
     *
     * @param token The JWT token to be checked.
     * @return {@code true} if the token has expired, otherwise {@code false}.
     */
    boolean isTokenExpired(String token);

    /**
     * Retrieves a specific item from the JWT token based on the provided identifier.
     * <p>
     * This method allows for extracting values from the token's claims using a specific
     * identifier. This is useful for retrieving information like user roles, permissions,
     * or any other custom claims embedded within the token.
     * </p>
     *
     * @param token      The JWT token from which to retrieve the item.
     * @param identifier The identifier of the item to retrieve from the token. This
     *                   should correspond to the key used in the token's claims.
     * @return The item value associated with the provided identifier, or {@code null}
     *         if the identifier does not exist.
     */
    String getItemFromToken(String token, String identifier);

    /**
     * Checks if the provided JWT token has been issued by the Serch application.
     * <p>
     * This method verifies the issuer claim of the token to determine if it has
     * been issued by the Serch application. This is important for security, as it
     * ensures that only tokens generated by trusted sources are accepted.
     * </p>
     *
     * @param token The JWT token to be checked.
     * @return {@code true} if the token has been issued by Serch, otherwise
     *         {@code false}.
     */
    boolean isTokenIssuedByOasis(String token);

    /**
     * Retrieves the email address associated with the provided JWT token.
     * <p>
     * This method extracts the email address from the token's claims, which can
     * be useful for identifying the user or for personalized communications.
     * </p>
     *
     * @param token The JWT token from which to retrieve the email address.
     * @return The email address retrieved from the token, or {@code null}
     *         if the email claim is not present.
     */
    String getEmailFromToken(String token);
}